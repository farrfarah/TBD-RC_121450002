
---
Farah Faizah\
121450002\
RC\
Three Ways of Storing and Accessing Lots of Images in Python\
<https://realpython.com/storing-images-in-python/>

================================================================

Artikel ini membahas pentingnya memahami berbagai cara menyimpan dan mengakses gambar di Python. Meskipun menyimpan gambar di disk (format .png atau .jpg) sudah cukup untuk kasus sederhana, ada beberapa alasan mengapa Anda perlu tahu cara yang lebih efisien:

- Menangani dataset besar: Saat bekerja dengan dataset gambar yang sangat banyak (jutaan gambar), menyimpan langsung di disk menjadi tidak efisien.
- Pelatihan model pembelajaran mesin: Algoritma seperti Convolutional Neural Networks (CNN) membutuhkan dataset besar untuk belajar. Memuat semua gambar ke memori akan memakan waktu lama, apalagi jika proses pelatihan diulang ratusan atau ribuan kali.
Oleh karena itu, artikel ini membahas tiga metode penyimpanan dan pengaksesan gambar yang lebih efisien:
1. Menyimpan gambar di disk sebagai file .png,
2. Lightning Memory-Mapped Databases (LMDB),
3. Hierarchical Data Format (HDF5)


Dalam hal ini akan digunakan data gambar Canadian Institute for Advanced Research, yang lebih dikenal CIFAR-10 terdiri dari 60.000 gambar berwarna ukuran 32x32 piksel. Data dapat diunduh dari link yang tercantum pada artikel. Data yang diunduh bukan file gambaryang dapat dibaa oleh manusia, dibutuhkan modul pickle untuk membaca data.

``` python
import numpy as np
import pickle
from pathlib import Path

# Path to the unzipped CIFAR data
data_dir = Path("C:/Users/mafad/Downloads/cifar-10-batches-py")

# Unpickle function provided by the CIFAR hosts
def unpickle(file):
    with open(file, "rb") as fo:
        dict = pickle.load(fo, encoding="bytes")
    return dict

images, labels = [], []
for batch in data_dir.glob("data_batch_*"):
    batch_data = unpickle(batch)
    for i, flat_im in enumerate(batch_data[b"data"]):
        im_channels = []
        # Each image is flattened, with channels in order of R, G, B
        for j in range(3):
            im_channels.append(
                flat_im[j * 1024 : (j + 1) * 1024].reshape((32, 32))
            )
        # Reconstruct the original image
        images.append(np.dstack((im_channels)))
        # Save the label
        labels.append(batch_data[b"labels"][i])

print("Loaded CIFAR-10 training set:")
print(f" - np.shape(images)     {np.shape(images)}")
print(f" - np.shape(labels)     {np.shape(labels)}")
```
outputnya =>\
    (50000, 32, 32, 3)\
    (50000,)




Setup for Storing Images on Disk



Akan dilakukan penginstallan modul untuk memanipulasi gambar dan penyimpanan data dalam format tertentu.
- Pillow : Digunakan untuk penyimpanan gambar dalam berbagai format (seperti JPEG, PNG, BMP, dll.), memanipulasi gambar (seperti pemotongan, penskalaan, rotasi) dan konversi antara mode warna gambar (seperti RGB, grayscale, mode biner)
- h5py : digunakan untuk bekerja dengan file dalam format Hierarcical Data Format version 5 yang memungkinkan pembuatan, penyimpanan, dan pengambilan data dari file HDF5.
- lmdb : digunakan untuk bekerja dengan Lightning Memory-Mapped Database yang berguna untuk penyimpanan dan pengambilan data dalam skenario dimana akses ke memori harus dilakukan secara cepat.



``` 
pip install Pillow
pip install h5py
pip install lmdb
```

#LMDB
LMDB (Lightning Memory-Mapped Database) adalah penyimpanan key-value yang cepat dan efisien, menggunakan pohon B+ untuk struktur data dalam memori. LMDB dioptimalkan untuk akses memori yang cepat dengan mengatur komponen kunci sesuai dengan ukuran halaman sistem operasi.Keefisienan LMDB juga disebabkan oleh penggunaan memori yang dipetakan, yang mengembalikan pointer langsung ke alamat memori tanpa perlu menyalin data.

#HDF5

HDF5 (Hierarchical Data Format) adalah format file yang digunakan untuk menyimpan dataset multidimensi dan grup dalam hierarki.HDF5 memungkinkan penyimpanan array multidimensi dari berbagai ukuran dan tipe data dalam dataset, serta dapat menyimpan grup yang berisi dataset atau grup lainnya. Penggunaan LMDB dan HDF5 dapat memberikan solusi penyimpanan data yang efisien dan cepat, terutama dalam konteks pengolahan data besar dan aplikasi pembelajaran mesin.



Storing a single image


Akan dilakukan perbandingan kinerja dalam membaca dan menulis file serta penggunaan memori disk antara tiga metode penyimpanan :    
- menggunakan file .png
- menggunakan LMDB
- menggunakan HDF5

Buat folder untuk setiap metode penyimpanan yang berisi semua file database atau gambar, dengan menggunakan modul 'path'.



``` python
from pathlib import Path

disk_dir = Path("data/disk/")
lmdb_dir = Path("data/lmdb/")
hdf5_dir = Path("data/hdf5/")
```
``` python
disk_dir.mkdir(parents=True, exist_ok=True)
lmdb_dir.mkdir(parents=True, exist_ok=True)
hdf5_dir.mkdir(parents=True, exist_ok=True)
```
Storing to disk

Fungsi store_single_disk menyimpan gambar sebagai file .png ke disk dengan menggunakan paket Pillow. Metadata gambar, seperti label, disimpan dalam file terpisah dalam format .csv. Dengan menyimpan label dalam file terpisah, memungkinkan manipulasi label secara independen tanpa harus memuat ulang gambar-gambar.

``` python
from PIL import Image
import csv

def store_single_disk(image, image_id, label):
    """ Stores a single image as a .png file on disk.
        Parameters:
        ---------------
        image       image array, (32, 32, 3) to be stored
        image_id    integer unique ID for image
        label       image label
    """
    Image.fromarray(image).save(disk_dir / f"{image_id}.png")

    with open(disk_dir / f"{image_id}.csv", "wt") as csvfile:
        writer = csv.writer(
            csvfile, delimiter=" ", quotechar="|", quoting=csv.QUOTE_MINIMAL
        )
        writer.writerow([label])
```

Storing to LMDB

LMDB (Lightning Memory-Mapped Database) adalah sistem penyimpanan kunci-nilai yang efisien, di mana setiap entri disimpan sebagai larik byte.Untuk menyimpan gambar ke LMDB, gambar diubah menjadi byte array dan disimpan bersama dengan labelnya. Penggunaan pickle untuk serialisasi memungkinkan penyimpanan objek Python dalam bentuk string. Pembuatan basis data LMDB memerlukan penentuan ukuran pemetaan memori yang diharapkan. Operasi baca dan tulis dengan LMDB dilakukan dalam transaksi, mirip dengan transaksi pada database tradisional.
Penyimpanan label gambar terpisah dari data gambar memungkinkan manipulasi label secara independen tanpa harus memuat ulang gambar-gambar.
Penggunaan LMDB cocok untuk menyimpan data dalam jumlah besar dengan akses cepat dan efisien.

``` python
class CIFAR_Image:
    def __init__(self, image, label):
        # Dimensions of image for reconstruction - not really necessary 
        # for this dataset, but some datasets may include images of 
        # varying sizes
        self.channels = image.shape[2]
        self.size = image.shape[:2]

        self.image = image.tobytes()
        self.label = label

    def get_image(self):
        """ Returns the image as a numpy array. """
        image = np.frombuffer(self.image, dtype=np.uint8)
        return image.reshape(*self.size, self.channels)
```

``` python
import lmdb
import pickle

def store_single_lmdb(image, image_id, label):
    """ Stores a single image to a LMDB.
        Parameters:
        ---------------
        image       image array, (32, 32, 3) to be stored
        image_id    integer unique ID for image
        label       image label
    """
    map_size = image.nbytes * 10

    # Create a new LMDB environment
    env = lmdb.open(str(lmdb_dir / f"single_lmdb"), map_size=map_size)

    # Start a new write transaction
    with env.begin(write=True) as txn:
        # All key-value pairs need to be strings
        value = CIFAR_Image(image, label)
        key = f"{image_id:08}"
        txn.put(key.encode("ascii"), pickle.dumps(value))
    env.close()
```

Storing with HDF5

Untuk melakukan penyimapanan gambar ke file HDF5, akan dibuat dua dataset, satu untuk gambar dan satu untuk metadatanya. Penggunaan modul h5py memungkinkan pembuatan dataset dengan mudah dalam file HDF5. Pastikan untuk memilih jenis data yang sesuai dengan kebutuhan karena memengaruhi persyaratan runtime dan penyimpanan dari file HDF5.

``` python
import h5py

def store_single_hdf5(image, image_id, label):
    """ Stores a single image to an HDF5 file.
        Parameters:
        ---------------
        image       image array, (32, 32, 3) to be stored
        image_id    integer unique ID for image
        label       image label
    """
    # Create a new HDF5 file
    file = h5py.File(hdf5_dir / f"{image_id}.h5", "w")

    # Create a dataset in the file
    dataset = file.create_dataset(
        "image", np.shape(image), h5py.h5t.STD_U8BE, data=image
    )
    meta_set = file.create_dataset(
        "meta", np.shape(label), h5py.h5t.STD_U8BE, data=label
    )
    file.close()
```

Experiment for storing a single image

Dilakukan eksperimen untuk menyimpan satu gambar menggunakan tiga metode yang berbeda : penyimpanan disk, LMDB, dan HDF5. Hasil eksperimen akan menunjukkan waktu yang dibutuhkan untuk menyimpan satu gambar beserta metadatanya, serta penggunaan memori yang terkait dengan setiap metode.

``` python
_store_single_funcs = dict(
    disk=store_single_disk, lmdb=store_single_lmdb, hdf5=store_single_hdf5
)
```
``` python
from timeit import timeit

store_single_timings = dict()

for method in ("disk", "lmdb", "hdf5"):
    t = timeit(
        "_store_single_funcs[method](image, 0, label)",
        setup="image=images[0]; label=labels[0]",
        number=1,
        globals=globals(),
    )
    store_single_timings[method] = t
    print(f"Method: {method}, Time usage: {t}")
```

outputnya =>
Method: disk, Time usage: 0.019730624999965585
Method: lmdb, Time usage: 0.007255480999958763
Method: hdf5, Time usage: 0.00319718999998031



Kita dapat melihat bahwa waktu penyimpanan untuk satu gambar dengan metode disk, LMDB, dan HDF5 sangat cepat yang menunjukkan efisiensi dalam proses penyimapanan.

Storing Many Images

Akan dibuat fungsi untuk menerima banyak dambar dengan metode disk, LMDB, dan HDF5.

``` python
def store_many_disk(images, labels):
    """ Stores an array of images to disk
        Parameters:
        ---------------
        images       images array, (N, 32, 32, 3) to be stored
        labels       labels array, (N, 1) to be stored
    """
    num_images = len(images)

    # Save all the images one by one
    for i, image in enumerate(images):
        Image.fromarray(image).save(disk_dir / f"{i}.png")

    # Save all the labels to the csv file
    with open(disk_dir / f"{num_images}.csv", "w") as csvfile:
        writer = csv.writer(
            csvfile, delimiter=" ", quotechar="|", quoting=csv.QUOTE_MINIMAL
        )
        for label in labels:
            # This typically would be more than just one value per row
            writer.writerow([label])

def store_many_lmdb(images, labels):
    """ Stores an array of images to LMDB.
        Parameters:
        ---------------
        images       images array, (N, 32, 32, 3) to be stored
        labels       labels array, (N, 1) to be stored
    """
    num_images = len(images)

    map_size = num_images * images[0].nbytes * 10

    # Create a new LMDB DB for all the images
    env = lmdb.open(str(lmdb_dir / f"{num_images}_lmdb"), map_size=map_size)

    # Same as before — but let's write all the images in a single transaction
    with env.begin(write=True) as txn:
        for i in range(num_images):
            # All key-value pairs need to be Strings
            value = CIFAR_Image(images[i], labels[i])
            key = f"{i:08}"
            txn.put(key.encode("ascii"), pickle.dumps(value))
    env.close()

def store_many_hdf5(images, labels):
    """ Stores an array of images to HDF5.
        Parameters:
        ---------------
        images       images array, (N, 32, 32, 3) to be stored
        labels       labels array, (N, 1) to be stored
    """
    num_images = len(images)

    # Create a new HDF5 file
    file = h5py.File(hdf5_dir / f"{num_images}_many.h5", "w")

    # Create a dataset in the file
    dataset = file.create_dataset(
        "images", np.shape(images), h5py.h5t.STD_U8BE, data=images
    )
    meta_set = file.create_dataset(
        "meta", np.shape(labels), h5py.h5t.STD_U8BE, data=labels
    )
    file.close()
```

Preparating the datasets

Persiapan dataset untuk melakukan pengujian dengan menggandakan ukuran dataset untuk menguji hingga 100.000 gambar.

``` python
cutoffs = [10, 100, 1000, 10000, 100000]

# Let's double our images so that we have 100,000
images = np.concatenate((images, images), axis=0)
labels = np.concatenate((labels, labels), axis=0)

# Make sure you actually have 100,000 images and labels
print(np.shape(images))
print(np.shape(labels))
```

outputnya =>\
    (100000, 32, 32, 3)\
    (100000,)

Datasets berjumlah 100000 dengan ukuran 32 x 32 dan format warna RGB.

Experiment for many images

Dilakukan eksperimen dengan menyimpan banyak gambar menggunakan metode disk, LMDB, dan HDF5. Digunakan timeit untuk mengukur waktu penyimpanan gambar pada setiap metode. Hasil eksperimen akan ditunjuukan menggunakan visualisasi grafik untuk membandingkan waktu penyimpanan gambar dengan berbagai metode.

``` python
_store_many_funcs = dict(
    disk=store_many_disk, lmdb=store_many_lmdb, hdf5=store_many_hdf5
)

from timeit import timeit

store_many_timings = {"disk": [], "lmdb": [], "hdf5": []}

for cutoff in cutoffs:
    for method in ("disk", "lmdb", "hdf5"):
        t = timeit(
            "_store_many_funcs[method](images_, labels_)",
            setup="images_=images[:cutoff]; labels_=labels[:cutoff]",
            number=1,
            globals=globals(),
        )
        store_many_timings[method].append(t)

        # Print out the method, cutoff, and elapsed time
        print(f"Method: {method}, Time usage: {t}")
```

outputnya =>\
Method: disk, Time usage: 0.018124909999983174\
Method: lmdb, Time usage: 0.007234601999982715\
Method: hdf5, Time usage: 0.0024438490000306956\
Method: disk, Time usage: 0.2125978369999757\
Method: lmdb, Time usage: 0.018986485000027642\
Method: hdf5, Time usage: 0.003022902999987309\
Method: disk, Time usage: 0.5415321730000073\
Method: lmdb, Time usage: 0.04515996600002836\
Method: hdf5, Time usage: 0.005065707000028397\
Method: disk, Time usage: 7.791340181999999\
Method: lmdb, Time usage: 0.6964805220000017\
Method: hdf5, Time usage: 0.06068997800002762\
Method: disk, Time usage: 52.53812050200003\
Method: lmdb, Time usage: 6.525270734999992\
Method: hdf5, Time usage: 0.5968197349999969\


Setiap cara penyimpanan akan dicoba menyimpan sebayak 111110 gambar dan
setiap gambar disimpan 5 kali. 
Metode pembaaan HDF5 menawarkan waktu penggunaan yang paling epat diantara ketiga metode yang diuji. Ini menunjukkan bahwa penggunaan format HDF5 cocok untuk aplikasi yang memerlukan operasi pembacaan yang cepaat dan efisien terhadap data gambar. Metode pembacaan dari LMDB menunjukkan kinerja yang baik dengan waktu penggunaan yang lebih cepat dibandingkan pembacaan langsung dari disk. LMDB dapat dipilih jika aplikasi memerlukan penyimpanan data gambar dalam basis data berorientasi key-value dengan kinerja tinggi. Sedangkan metode pembacaan langsung dari disk menunjukkan waktu penggunaan yang lebih lambat dibandingkan dengan metode lainnya. Namun, masih dapat menjadi pilihan jika aplikasi memiliki keterbatasan dalam penggunaan sumber daya tambahan seperti basis data atau jika skala data yang tidak terlalu besar.

``` python
import matplotlib.pyplot as plt

def plot_with_legend(
    x_range, y_data, legend_labels, x_label, y_label, title, log=False
):
    """ Displays a single plot with multiple datasets and matching legends.
        Parameters:
        --------------
        x_range         list of lists containing x data
        y_data          list of lists containing y values
        legend_labels   list of string legend labels
        x_label         x axis label
        y_label         y axis label
    """
    plt.style.use("seaborn-whitegrid")
    plt.figure(figsize=(10, 7))

    if len(y_data) != len(legend_labels):
        raise TypeError(
            "Error: number of data sets does not match number of labels."
        )

    all_plots = []
    for data, label in zip(y_data, legend_labels):
        if log:
            temp, = plt.loglog(x_range, data, label=label)
        else:
            temp, = plt.plot(x_range, data, label=label)
        all_plots.append(temp)

    plt.title(title)
    plt.xlabel(x_label)
    plt.ylabel(y_label)
    plt.legend(handles=all_plots)
    plt.show()

# Getting the store timings data to display
disk_x = store_many_timings["disk"]
lmdb_x = store_many_timings["lmdb"]
hdf5_x = store_many_timings["hdf5"]

plot_with_legend(
    cutoffs,
    [disk_x, lmdb_x, hdf5_x],
    ["PNG files", "LMDB", "HDF5"],
    "Number of images",
    "Seconds to store",
    "Storage time",
    log=False,
)

plot_with_legend(
    cutoffs,
    [disk_x, lmdb_x, hdf5_x],
    ["PNG files", "LMDB", "HDF5"],
    "Number of images",
    "Seconds to store",
    "Log storage time",
    log=True,
)
```

![alt text](gambar1.png)
![alt text](gambar2.png)

Pada grafik terdapat tiga kurva yang menunjukkan waktu yang dibutuhkan untuk menyimpan gambar dengan metode penyimpanan yang berbeda : disk, LMDB, dan HDF5. Masing-masing kurva menunjukkan waktu penyimpanan untuk berbagai jumlah gambar, mulai dari satu gambar hingga 100.000 gambar.

Metode Disk:
Kurva untuk metode Disk menunjukkan peningkatan waktu penyimpanan yang hampir linear seiring dengan bertambahnya jumlah gambar. Pada jumlah gambar yang kecil, waktu penyimpanan metode Disk relatif cepat dibandingkan dengan metode LMDB dan HDF5. Namun, pada jumlah gambar yang besar, waktu penyimpanan metode Disk menjadi yang paling lambat di antara ketiga metode.

Metode LMDB:
Kurva untuk metode LMDB menunjukkan peningkatan waktu penyimpanan yang lebih lambat dibandingkan dengan metode Disk pada jumlah gambar yang kecil. Pada jumlah gambar yang besar, waktu penyimpanan metode LMDB menjadi lebih cepat dibandingkan dengan metode Disk. Hal ini menunjukkan bahwa metode LMDB lebih efisien untuk menyimpan gambar dalam jumlah besar.

Metode HDF5:
Kurva untuk metode HDF5 menunjukkan peningkatan waktu penyimpanan yang paling lambat dibandingkan dengan metode Disk dan LMDB pada semua jumlah gambar. Hal ini menunjukkan bahwa metode HDF5 adalah yang paling lambat di antara ketiga metode untuk menyimpan gambar.

Reading from Disk

Selanjutnya akan dilakukan cara membaca kembali gambar tunggal beserta meta data yang sebelumnya disimpan dengan tiga metode yang berbeda : disk, LMDB, dan HDF5.


-Experiment for reading as single image



-Reading from single disk

``` python
def read_single_disk(image_id):
    """ Stores a single image to disk.
        Parameters:
        ---------------
        image_id    integer unique ID for image

        Returns:
        ----------
        image       image array, (32, 32, 3) to be stored
        label       associated meta data, int label
    """
    image = np.array(Image.open(disk_dir / f"{image_id}.png"))

    with open(disk_dir / f"{image_id}.csv", "r") as csvfile:
        reader = csv.reader(
            csvfile, delimiter=" ", quotechar="|", quoting=csv.QUOTE_MINIMAL
        )
        label = int(next(reader)[0])

    return image, label
```

=Reading from single lmdb

``` python
def read_single_lmdb(image_id):
    """ Stores a single image to LMDB.
        Parameters:
        ---------------
        image_id    integer unique ID for image

        Returns:
        ----------
        image       image array, (32, 32, 3) to be stored
        label       associated meta data, int label
    """
    # Open the LMDB environment
    env = lmdb.open(str(lmdb_dir / f"single_lmdb"), readonly=True)

    # Start a new read transaction
    with env.begin() as txn:
        # Encode the key the same way as we stored it
        data = txn.get(f"{image_id:08}".encode("ascii"))
        # Remember it's a CIFAR_Image object that is loaded
        cifar_image = pickle.loads(data)
        # Retrieve the relevant bits
        image = cifar_image.get_image()
        label = cifar_image.label
    env.close()

    return image, label
```

-Reading from single hdf5

``` python
def read_single_hdf5(image_id):
    """ Stores a single image to HDF5.
        Parameters:
        ---------------
        image_id    integer unique ID for image

        Returns:
        ----------
        image       image array, (32, 32, 3) to be stored
        label       associated meta data, int label
    """
    # Open the HDF5 file
    file = h5py.File(hdf5_dir / f"{image_id}.h5", "r+")

    image = np.array(file["/image"]).astype("uint8")
    label = int(np.array(file["/meta"]).astype("uint8"))

    return image, label
```

``` python
_read_single_funcs = dict(
    disk=read_single_disk, lmdb=read_single_lmdb, hdf5=read_single_hdf5
)
```
Ketiga metode memungkinkan dalam pembacaan kembali gambar tunggal beserta metadata. Membaca disk merupakan yang paling sederhana, sedangkan membaca dari LMDB membutuhkan proses deserialisasi tambahan, sedangkan membaca HDF5 mirip dengan proses mennulis, dimana dataset diakses menggunakan pengindeksan pada objek file.

Experiment for Reading a Single Image

``` python
from timeit import timeit

read_single_timings = dict()

for method in ("disk", "lmdb", "hdf5"):
    t = timeit(
        "_read_single_funcs[method](0)",
        setup="image=images[0]; label=labels[0]",
        number=1,
        globals=globals(),
    )
    read_single_timings[method] = t
    print(f"Method: {method}, Time usage: {t}")
```

outputnya =>\
Method: disk, Time usage: 0.0010149739999860685\
Method: lmdb, Time usage: 0.0003486770000336037\
Method: hdf5, Time usage: 0.0021829170000273734\

Terlihat bahwa LMDB memiliki waktu baa tercepat diantara ketiga metode. Dan untuk disk sedikit lebih lambat dibandingkan HDF5, meskipun memiliki selisih yang kecil.


Reading many images

Adjusting the Code for Many Images

Sama halnya dengan membaca single images dengan ketiga cara, akan tetapi
kali ini gambar yang dibaca ada banyak

``` python
def read_many_disk(num_images):
    """ Reads image from disk.
        Parameters:
        ---------------
        num_images   number of images to read

        Returns:
        ----------
        images      images array, (N, 32, 32, 3) to be stored
        labels      associated meta data, int label (N, 1)
    """
    images, labels = [], []

    # Loop over all IDs and read each image in one by one
    for image_id in range(num_images):
        images.append(np.array(Image.open(disk_dir / f"{image_id}.png")))

    with open(disk_dir / f"{num_images}.csv", "r") as csvfile:
        reader = csv.reader(
            csvfile, delimiter=" ", quotechar="|", quoting=csv.QUOTE_MINIMAL
        )
        for row in reader:
            labels.append(int(row[0]))
    return images, labels

def read_many_lmdb(num_images):
    """ Reads image from LMDB.
        Parameters:
        ---------------
        num_images   number of images to read

        Returns:
        ----------
        images      images array, (N, 32, 32, 3) to be stored
        labels      associated meta data, int label (N, 1)
    """
    images, labels = [], []
    env = lmdb.open(str(lmdb_dir / f"{num_images}_lmdb"), readonly=True)

    # Start a new read transaction
    with env.begin() as txn:
        # Read all images in one single transaction, with one lock
        # We could split this up into multiple transactions if needed
        for image_id in range(num_images):
            data = txn.get(f"{image_id:08}".encode("ascii"))
            # Remember that it's a CIFAR_Image object 
            # that is stored as the value
            cifar_image = pickle.loads(data)
            # Retrieve the relevant bits
            images.append(cifar_image.get_image())
            labels.append(cifar_image.label)
    env.close()
    return images, labels

def read_many_hdf5(num_images):
    """ Reads image from HDF5.
        Parameters:
        ---------------
        num_images   number of images to read

        Returns:
        ----------
        images      images array, (N, 32, 32, 3) to be stored
        labels      associated meta data, int label (N, 1)
    """
    images, labels = [], []

    # Open the HDF5 file
    file = h5py.File(hdf5_dir / f"{num_images}_many.h5", "r+")

    images = np.array(file["/images"]).astype("uint8")
    labels = np.array(file["/meta"]).astype("uint8")

    return images, labels

_read_many_funcs = dict(
    disk=read_many_disk, lmdb=read_many_lmdb, hdf5=read_many_hdf5
)
```

experiment for reading many images

``` python
from timeit import timeit

read_many_timings = {"disk": [], "lmdb": [], "hdf5": []}

for cutoff in cutoffs:
    for method in ("disk", "lmdb", "hdf5"):
        t = timeit(
            "_read_many_funcs[method](num_images)",
            setup="num_images=cutoff",
            number=0,
            globals=globals(),
        )
        read_many_timings[method].append(t)

        # Print out the method, cutoff, and elapsed time
        print(f"Method: {method}, No. images: {cutoff}, Time usage: {t}")
```

outputnya =>\
Method: disk, No. images: 10, Time usage: 8.630000252196623e-07\
Method: lmdb, No. images: 10, Time usage: 6.389999498424004e-07\
Method: hdf5, No. images: 10, Time usage: 5.839999630552484e-07\
Method: disk, No. images: 100, Time usage: 5.450000344353612e-07\
Method: lmdb, No. images: 100, Time usage: 5.609999789157882e-07\
Method: hdf5, No. images: 100, Time usage: 4.719999537883268e-07\
Method: disk, No. images: 1000, Time usage: 5.759999908150348e-07\
Method: lmdb, No. images: 1000, Time usage: 5.210000040278828e-07\
Method: hdf5, No. images: 1000, Time usage: 4.959999841958052e-07\
Method: disk, No. images: 10000, Time usage: 5.089999604024342e-07\
Method: lmdb, No. images: 10000, Time usage: 4.220000278110092e-07\
Method: hdf5, No. images: 10000, Time usage: 4.839999974137754e-07\
Method: disk, No. images: 100000, Time usage: 3.300000344097498e-07\
Method: lmdb, No. images: 100000, Time usage: 3.480000145827944e-07\
Method: hdf5, No. images: 100000, Time usage: 4.030000013699464e-07\
LMDB tetap menjadi metode tercepat secara rata-rata. Sedangkan disk dan HDF5 keduanya memiliki performa yang setara untuk membaca banyak gambar.

``` python
disk_x_r = read_many_timings["disk"]
lmdb_x_r = read_many_timings["lmdb"]
hdf5_x_r = read_many_timings["hdf5"]

plot_with_legend(
    cutoffs,
    [disk_x_r, lmdb_x_r, hdf5_x_r],
    ["PNG files", "LMDB", "HDF5"],
    "Number of images",
    "Seconds to read",
    "Read time",
    log=False,
)

plot_with_legend(
    cutoffs,
    [disk_x_r, lmdb_x_r, hdf5_x_r],
    ["PNG files", "LMDB", "HDF5"],
    "Number of images",
    "Seconds to read",
    "Log read time",
    log=True,
)
```

``` python
plot_with_legend(
    cutoffs,
    [disk_x_r, lmdb_x_r, hdf5_x_r, disk_x, lmdb_x, hdf5_x],
    [
        "Read PNG",
        "Read LMDB",
        "Read HDF5",
        "Write PNG",
        "Write LMDB",
        "Write HDF5",
    ],
    "Number of images",
    "Seconds",
    "Log Store and Read Times",
    log=False,
)
```

![alt text](gambar3.png)
![alt text](gambar4.png)

Dari grafik diketahui bahwa waktu baca rata-rata untuk metode disk cenderung stabil meskipun jumlah gambar yang dibaca meningkat, sednagkan untuk metode LMDB dan HDF5 waktu baca rata-ratanya sedikit meningkat seiring dengan bertambbahnya jumlah gambar. Peningkatan ini mungkin tidak terlalu signifikan.

![alt text](gambar5.png)

Berdasarkan pengukuran yang ditampilkan pada grafik, ketiga metode penyimpanan ini mampu membaca dan menulis gambar dengan waktu yang cukup singkat dan konsisten, bahkan untuk jumlah gambar yang banyak.

- Disk: Metode Disk menawarkan konsistensi waktu baca dan tulis yang baik, terutama untuk keperluan membaca dan menulis sedikit gambar.
- LMDB: Metode LMDB secara keseluruhan memiliki waktu baca dan tulis rata-rata yang sedikit lebih cepat dibandingkan dengan metode Disk.
- HDF5: Metode HDF5 memiliki waktu baca dan tulis rata-rata yang sedikit lebih lambat dibandingkan dengan metode LMDB dan Disk, tetapi masih tergolong cepat dan konsisten.

``` python
# Memory used in KB
disk_mem = [24, 204, 2004, 20032, 200296]
lmdb_mem = [60, 420, 4000, 39000, 393000]
hdf5_mem = [36, 304, 2900, 29000, 293000]

X = [disk_mem, lmdb_mem, hdf5_mem]

ind = np.arange(3)
width = 0.35

plt.subplots(figsize=(8, 10))
plots = [plt.bar(ind, [row[0] for row in X], width)]
for i in range(1, len(cutoffs)):
    plots.append(
        plt.bar(
            ind, [row[i] for row in X], width, bottom=[row[i - 1] for row in X]
        )
    )

plt.ylabel("Memory in KB")
plt.title("Disk memory used by method")
plt.xticks(ind, ("PNG", "LMDB", "HDF5"))
plt.yticks(np.arange(0, 400000, 100000))

plt.legend(
    [plot[0] for plot in plots], ("10", "100", "1,000", "10,000", "100,000")
)
plt.show()
```
![alt text](gambar6.png)


Berdasarkan pengukuran yang ditampilkan pada grafik, ketiga metode penyimpanan ini mampu membaca dan menulis gambar dengan waktu yang cukup singkat dan konsisten, bahkan untuk jumlah gambar yang banyak.

Disk: Metode Disk menawarkan konsistensi waktu baca dan tulis yang baik, terutama untuk keperluan membaca dan menulis sedikit gambar.
LMDB: Metode LMDB secara keseluruhan memiliki waktu baca dan tulis rata-rata yang sedikit lebih cepat dibandingkan dengan metode Disk.
HDF5: Metode HDF5 memiliki waktu baca dan tulis rata-rata yang sedikit lebih lambat dibandingkan dengan metode LMDB dan Disk, tetapi masih tergolong cepat dan konsisten.

